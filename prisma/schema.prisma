generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  username String?
  name String?
  email String  @unique
  emailVerified DateTime?
  image String @default("")
  online Boolean @default(true)
  bio String @default("No information given.")
  newUser Boolean @default(true)
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  notifications Notification[]
  accounts Account[]
  sessions Session[]
}

model Artist {
  id            String    @id @default(cuid())
  name String
  banner String
  avatar String
  bio String
  songs Song[]
}

model Song {
  id            String    @id @default(cuid())
  title String
  cover String
  artistId String
  songUrl String
  length String?
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  artist Artist @relation(fields: [artistId], references: [id])
}

model FriendRequest {
  id            String    @id @default(cuid())
  senderId Int
  recieverId Int
  accepted Boolean @default(false)
  declined Boolean @default(false)
  pending Boolean  @default(true)
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
}

model Notification {
  id            String    @id @default(cuid())
  recieverId String
  message String
  read Boolean @default(false)
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  reciever User @relation(fields: [recieverId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}